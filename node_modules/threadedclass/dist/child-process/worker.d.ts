import { Message, CallbackFunction } from '../shared/sharedApi';
/** In a child process, there is running one (1) Worker, which handles the communication with the parent process. */
export declare abstract class Worker {
    protected childHandler: ChildHandle;
    protected instanceHandles: {
        [instanceId: string]: InstanceHandle;
    };
    private callbacks;
    private remoteFns;
    protected disabledMultithreading: boolean;
    private _parentPid;
    private _config?;
    protected abstract killInstance(handle: InstanceHandle): void;
    protected abstract sendInstanceMessageToParent(handle: InstanceHandle, msg: Message.From.Instance.AnyConstr, cb?: CallbackFunction): void;
    protected abstract sendChildMessageToParent(handle: ChildHandle, msg: Message.From.Child.AnyConstr, cb?: CallbackFunction): void;
    onMessageFromParent(m: Message.To.Any): void;
    log: (...data: any[]) => void;
    logError: (...data: any[]) => void;
    private decodeArgumentsFromParent;
    private encodeArgumentsToParent;
    private replyToInstanceMessage;
    private replyToChildMessage;
    private replyInstanceError;
    private replyChildError;
    private sendInstanceReplyToParent;
    private sendChildReplyToParent;
    private sendLog;
    private sendCallback;
    private getAllProperties;
    private handleInstanceMessageFromParent;
    private handleChildMessageFromParent;
    private startOrphanMonitoring;
}
export interface MessageHandle {
    cmdId: number;
    queue: {
        [cmdId: string]: {
            traceError?: Error;
            cb: CallbackFunction;
        };
    };
}
export interface InstanceHandle extends MessageHandle {
    id: string;
    instance: any;
}
export interface ChildHandle extends MessageHandle {
}
