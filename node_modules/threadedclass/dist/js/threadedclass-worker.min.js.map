{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dist/child-process/threadedclass-worker.js","dist/child-process/worker.js","dist/shared/lib.js","dist/shared/sharedApi.js","node_modules/base64-js/index.js","node_modules/buffer/index.js","node_modules/ieee754/index.js","node_modules/is-running/index.js","node_modules/process/browser.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Object","defineProperty","value","lib_1","worker_1","WorkerThreads","getWorkerThreads","send","message","parentPort","postMessage","process","ThreadedWorker","Worker","[object Object]","handle","msg","cb","assign","messageType","cmdId","instanceId","id","queue","traceError","this","instanceHandles","isBrowser","worker","onmessage","m","type","onMessageFromParent","data","console","log","nodeSupportsWorkerThreads","workerThreads","isMainThread","isRunningInAWorkerThread","error","logError","on","isRunning","sharedApi_1","childHandler","callbacks","remoteFns","disabledMultithreading","_parentPid","sendLog","cmd","Message","To","Instance","CommandType","INIT","instance","handleInstanceMessageFromParent","replyInstanceError","toString","stack","handleChildMessageFromParent","replyChildError","args","decodeArguments","callbackId","orgError","Promise","resolve","reject","sendCallback","err","encodedResult","errStack","stripStack","getErrorStack","orgStack","split","slice","join","combineErrorStacks","result","decodeArgumentsFromParent","encodeArguments","messageToReplyTo","reply","sendInstanceReplyToParent","undefined","sendChildReplyToParent","replyTo","From","REPLY","sendInstanceMessageToParent","Child","sendChildMessageToParent","LOG","CALLBACK","obj","props","concat","getOwnPropertyNames","getPrototypeOf","pModuleClass","_config","config","parentPid","oReq","XMLHttpRequest","open","modulePath","onload","response","then","bodyString","fcn","exportName","moduleClass","eval","decodedArgs","apply","allProps","getAllProperties","forEach","prop","indexOf","descriptor","getOwnPropertyDescriptor","inProto","proto","__proto__","descr","enumerable","writable","get","set","readable","push","key","InitPropType","FUNCTION","VALUE","replyToInstanceMessage","catch","errorResponse","disableMultithreading","startOrphanMonitoring","PING","fixedArgs","encodeArgumentsToParent","SET","fixedValue","property","KILL","killInstance","callback","assertNever","GET_MEM_USAGE","memUsage","memoryUsage","window","performance","memory","replyToChildMessage","setInterval","setTimeout","exit","hasOwnProperty","ArrayMap","browserSupportsWebWorkers","_value","matchLines","stackLines","matchIndex","matching","line","match","stacks","Map","super","arr","removedSomething","index","splice","delete","_a","_b","totalSize","total","values","ArgumentType","DEFAULT_AUTO_RESTART_RETRY_DELAY","DEFAULT_AUTO_RESTART_RETRY_COUNT","DEFAULT_KILL_TIMEOUT","DEFAULT_RESTART_TIMEOUT","DEFAULT_CHILD_FREEZE_TIME","argumentsCallbackId","map","arg","OBJECT","Buffer","BUFFER","original","STRING","NUMBER","UNDEFINED","NULL","OTHER","getCallback","from","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","extraBytes","parts","len2","encodeChunk","lookup","Uint8Array","Array","start","end","num","output","base64","ieee754","SlowBuffer","alloc","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","RangeError","buf","prototype","encodingOrOffset","TypeError","allocUnsafe","string","encoding","isEncoding","actual","write","fromString","ArrayBuffer","isView","fromArrayLike","isInstance","buffer","array","byteOffset","fromArrayBuffer","valueOf","b","isBuffer","checked","copy","numberIsNaN","isArray","fromObject","Symbol","toPrimitive","assertSize","size","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","species","configurable","poolSize","fill","allocUnsafeSlow","_isBuffer","compare","x","y","list","pos","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","INVALID_BASE64_RE","Infinity","leadSurrogate","base64clean","src","dst","constructor","name","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","abs","isNaN","floor","LN2","pid","stub","kill","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","nextTick","title","browser","env","argv","version","versions","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask"],"mappings":"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","file":"threadedclass-worker.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lib_1 = require(\"../shared/lib\");\nconst worker_1 = require(\"./worker\");\nconst WorkerThreads = (0, lib_1.getWorkerThreads)();\n// This file is launched in the worker child process.\n// This means that all code in this file is considered to be sandboxed in the child process.\nfunction send(message) {\n    if (WorkerThreads) {\n        if (WorkerThreads.parentPort) {\n            WorkerThreads.parentPort.postMessage(message);\n        }\n        else {\n            throw Error('WorkerThreads.parentPort not set!');\n        }\n    }\n    else if (process.send) {\n        process.send(message);\n        // @ts-ignore global postMessage\n    }\n    else if (postMessage) {\n        // @ts-ignore\n        postMessage(message);\n    }\n    else\n        throw Error('process.send and postMessage are undefined!');\n}\nclass ThreadedWorker extends worker_1.Worker {\n    sendInstanceMessageToParent(handle, msg, cb) {\n        const message = Object.assign(Object.assign({}, msg), {\n            messageType: 'instance',\n            cmdId: handle.cmdId++,\n            instanceId: handle.id\n        });\n        if (cb) {\n            handle.queue[message.cmdId + ''] = {\n                // Store an error, just so we can append the original stack later in case there's an error:\n                traceError: new Error('Error when calling callback'),\n                cb\n            };\n        }\n        send(message);\n    }\n    sendChildMessageToParent(handle, msg, cb) {\n        const message = Object.assign(Object.assign({}, msg), {\n            messageType: 'child',\n            cmdId: handle.cmdId++\n        });\n        if (cb) {\n            handle.queue[message.cmdId + ''] = {\n                // Store an error, just so we can append the original stack later in case there's an error:\n                traceError: new Error('Error when calling callback'),\n                cb\n            };\n        }\n        send(message);\n    }\n    killInstance(handle) {\n        delete this.instanceHandles[handle.id];\n    }\n}\nfunction isRunningInAWorkerThread() {\n    if ((0, lib_1.nodeSupportsWorkerThreads)()) {\n        const workerThreads = (0, lib_1.getWorkerThreads)();\n        if (workerThreads) {\n            if (!workerThreads.isMainThread) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nif ((0, lib_1.isBrowser)()) {\n    // Is running in a web-worker\n    const worker = new ThreadedWorker();\n    // @ts-ignore global onmessage\n    onmessage = (m) => {\n        // Received message from parent\n        if (m.type === 'message') {\n            worker.onMessageFromParent(m.data);\n        }\n        else {\n            console.log('child process: onMessage', m);\n        }\n    };\n}\nelse if (isRunningInAWorkerThread()) {\n    // Is running in a worker-thread\n    if (WorkerThreads) {\n        const worker = new ThreadedWorker();\n        console.log = worker.log;\n        console.error = worker.logError;\n        if (WorkerThreads.parentPort) {\n            WorkerThreads.parentPort.on('message', (m) => {\n                // Received message from parent\n                worker.onMessageFromParent(m);\n            });\n        }\n        else {\n            throw Error('WorkerThreads.parentPort not set!');\n        }\n    }\n    else {\n        throw Error('WorkerThreads not available!');\n    }\n}\nelse if (process.send) {\n    // Is running in a child process\n    const worker = new ThreadedWorker();\n    console.log = worker.log;\n    console.error = worker.logError;\n    process.on('message', (m) => {\n        // Received message from parent\n        worker.onMessageFromParent(m);\n    });\n}\nelse {\n    throw Error('process.send and onmessage are undefined!');\n}\n//# sourceMappingURL=threadedclass-worker.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Worker = void 0;\nconst isRunning = require(\"is-running\");\nconst lib_1 = require(\"../shared/lib\");\nconst sharedApi_1 = require(\"../shared/sharedApi\");\n/** In a child process, there is running one (1) Worker, which handles the communication with the parent process. */\nclass Worker {\n    constructor() {\n        this.childHandler = {\n            cmdId: 0,\n            queue: {}\n        };\n        this.instanceHandles = {};\n        this.callbacks = {};\n        this.remoteFns = {};\n        this.disabledMultithreading = false;\n        this._parentPid = 0;\n        this.log = (...data) => {\n            this.sendLog(data);\n        };\n        this.logError = (...data) => {\n            this.sendLog(['Error', ...data]);\n        };\n    }\n    onMessageFromParent(m) {\n        // A message was received from Parent\n        if (m.messageType === 'instance') {\n            let handle = this.instanceHandles[m.instanceId];\n            if (!handle && m.cmd !== sharedApi_1.Message.To.Instance.CommandType.INIT) {\n                console.log(`Child process: Unknown instanceId: \"${m.instanceId}\"`);\n                return; // fail silently?\n            }\n            if (!handle) {\n                // create temporary handle:\n                handle = {\n                    id: m.instanceId,\n                    cmdId: 0,\n                    queue: {},\n                    instance: {}\n                };\n            }\n            try {\n                this.handleInstanceMessageFromParent(m, handle);\n            }\n            catch (e) {\n                if (m.cmdId) {\n                    this.replyInstanceError(handle, m, `Error: ${e.toString()} ${e.stack} thrown in handleInstanceMessageFromParent on instance \"${m.instanceId}\"`);\n                }\n                else\n                    this.log('Error: ' + e.toString(), e.stack);\n            }\n        }\n        else if (m.messageType === 'child') {\n            let handle = this.childHandler;\n            try {\n                this.handleChildMessageFromParent(m, handle);\n            }\n            catch (e) {\n                if (m.cmdId) {\n                    this.replyChildError(handle, m, `Error: ${e.toString()} ${e.stack} thrown in handleChildMessageFromParent on child`);\n                }\n                else\n                    this.log('Error: ' + e.toString(), e.stack);\n            }\n        }\n    }\n    decodeArgumentsFromParent(handle, args) {\n        // Note: handle.instance could change if this was called for the constructor parameters, so it needs to be loose\n        return (0, sharedApi_1.decodeArguments)(() => handle.instance, args, (a) => {\n            const callbackId = a.value;\n            if (!this.remoteFns[callbackId]) {\n                this.remoteFns[callbackId] = ((...args) => {\n                    const orgError = new Error();\n                    return new Promise((resolve, reject) => {\n                        const callbackId = a.value;\n                        this.sendCallback(handle, callbackId, args, (err, encodedResult) => {\n                            if (err) {\n                                const errStack = (0, lib_1.stripStack)((0, lib_1.getErrorStack)(err), [\n                                    /[\\\\/]parent-process[\\\\/]manager/,\n                                    /[\\\\/]eventemitter3[\\\\/]index/\n                                ]);\n                                const orgStack = (orgError.stack + '')\n                                    .split('\\n')\n                                    .slice(2) // Remove the first two lines, since they are internal to ThreadedClass\n                                    .join('\\n');\n                                reject((0, lib_1.combineErrorStacks)(errStack, orgStack));\n                                // reject(err)\n                            }\n                            else {\n                                const result = encodedResult ? this.decodeArgumentsFromParent(handle, [encodedResult]) : [encodedResult];\n                                resolve(result[0]);\n                            }\n                        });\n                    });\n                });\n            }\n            return this.remoteFns[callbackId];\n        });\n    }\n    encodeArgumentsToParent(instance, args) {\n        return (0, sharedApi_1.encodeArguments)(instance, this.callbacks, args, this.disabledMultithreading);\n    }\n    replyToInstanceMessage(handle, messageToReplyTo, reply) {\n        this.sendInstanceReplyToParent(handle, messageToReplyTo.cmdId, undefined, reply);\n    }\n    replyToChildMessage(handle, messageToReplyTo, reply) {\n        this.sendChildReplyToParent(handle, messageToReplyTo.cmdId, undefined, reply);\n    }\n    replyInstanceError(handle, messageToReplyTo, error) {\n        this.sendInstanceReplyToParent(handle, messageToReplyTo.cmdId, error);\n    }\n    replyChildError(handle, messageToReplyTo, error) {\n        this.sendChildReplyToParent(handle, messageToReplyTo.cmdId, error);\n    }\n    sendInstanceReplyToParent(handle, replyTo, error, reply) {\n        let msg = {\n            cmd: sharedApi_1.Message.From.Instance.CommandType.REPLY,\n            replyTo: replyTo,\n            error: error ? (error.stack || error).toString() : error,\n            reply: reply\n        };\n        this.sendInstanceMessageToParent(handle, msg);\n    }\n    sendChildReplyToParent(handle, replyTo, error, reply) {\n        let msg = {\n            cmd: sharedApi_1.Message.From.Child.CommandType.REPLY,\n            replyTo: replyTo,\n            error: error ? (error.stack || error).toString() : error,\n            reply: reply\n        };\n        this.sendChildMessageToParent(handle, msg);\n    }\n    sendLog(log) {\n        let msg = {\n            cmd: sharedApi_1.Message.From.Child.CommandType.LOG,\n            log: log\n        };\n        this.sendChildMessageToParent(this.childHandler, msg);\n    }\n    sendCallback(handle, callbackId, args, cb) {\n        let msg = {\n            cmd: sharedApi_1.Message.From.Instance.CommandType.CALLBACK,\n            callbackId: callbackId,\n            args: args\n        };\n        this.sendInstanceMessageToParent(handle, msg, cb);\n    }\n    getAllProperties(obj) {\n        let props = [];\n        do {\n            props = props.concat(Object.getOwnPropertyNames(obj));\n            obj = Object.getPrototypeOf(obj);\n        } while (obj);\n        return props;\n    }\n    handleInstanceMessageFromParent(m, handle) {\n        const instance = handle.instance;\n        if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.INIT) {\n            // This is the initial message sent from the parent process upon initialization.\n            const msg = m;\n            this._config = m.config;\n            this._parentPid = m.parentPid;\n            let pModuleClass;\n            // Load in the class:\n            if ((0, lib_1.isBrowser)()) {\n                pModuleClass = new Promise((resolve, reject) => {\n                    // @ts-ignore\n                    let oReq = new XMLHttpRequest();\n                    oReq.open('GET', msg.modulePath, true);\n                    // oReq.responseType = 'blob'\n                    oReq.onload = () => {\n                        if (oReq.response) {\n                            resolve(oReq.response);\n                        }\n                        else {\n                            reject(Error(`Bad reply from ${msg.modulePath} in instance ${handle.id}`));\n                        }\n                    };\n                    oReq.send();\n                })\n                    .then((bodyString) => {\n                    // This is a terrible hack, I'm ashamed of myself.\n                    // Better solutions are very much appreciated.\n                    // tslint:disable-next-line:no-var-keyword\n                    var f = null;\n                    let fcn = `\n\t\t\t\t\t\tf = function() {\n\t\t\t\t\t\t\t${bodyString}\n\t\t\t\t\t\t\t;\n\t\t\t\t\t\t\treturn ${msg.exportName}\n\t\t\t\t\t\t}\n\t\t\t\t\t`;\n                    // tslint:disable-next-line:no-eval\n                    let moduleClass = eval(fcn)();\n                    f = f;\n                    if (!moduleClass) {\n                        throw Error(`${msg.exportName} not found in ${msg.modulePath}`);\n                    }\n                    return moduleClass;\n                });\n            }\n            else {\n                pModuleClass = Promise.resolve(require(msg.modulePath))\n                    .then((module) => {\n                    return module[msg.exportName];\n                });\n            }\n            pModuleClass\n                .then((moduleClass) => {\n                if (!moduleClass) {\n                    return Promise.reject('Failed to find class');\n                }\n                const handle = {\n                    id: msg.instanceId,\n                    cmdId: 0,\n                    queue: {},\n                    instance: null // Note: This is dangerous, but gets set right after.\n                };\n                const decodedArgs = this.decodeArgumentsFromParent(handle, msg.args);\n                handle.instance = ((...args) => {\n                    return new moduleClass(...args);\n                }).apply(null, decodedArgs);\n                this.instanceHandles[handle.id] = handle;\n                const instance = handle.instance;\n                const allProps = this.getAllProperties(instance);\n                const props = [];\n                allProps.forEach((prop) => {\n                    if ([\n                        'constructor',\n                        '__defineGetter__',\n                        '__defineSetter__',\n                        'hasOwnProperty',\n                        '__lookupGetter__',\n                        '__lookupSetter__',\n                        'isPrototypeOf',\n                        'propertyIsEnumerable',\n                        'toString',\n                        'valueOf',\n                        '__proto__',\n                        'toLocaleString'\n                    ].indexOf(prop) !== -1)\n                        return;\n                    let descriptor = Object.getOwnPropertyDescriptor(instance, prop);\n                    let inProto = 0;\n                    let proto = instance.__proto__;\n                    while (!descriptor) {\n                        if (!proto)\n                            break;\n                        descriptor = Object.getOwnPropertyDescriptor(proto, prop);\n                        inProto++;\n                        proto = proto.__proto__;\n                    }\n                    if (!descriptor)\n                        descriptor = {};\n                    let descr = {\n                        // configurable:\t!!descriptor.configurable,\n                        inProto: inProto,\n                        enumerable: !!descriptor.enumerable,\n                        writable: !!descriptor.writable,\n                        get: !!descriptor.get,\n                        set: !!descriptor.set,\n                        readable: !!(!descriptor.get && !descriptor.get) // if no getter or setter, ie an ordinary property\n                    };\n                    if (typeof instance[prop] === 'function') {\n                        props.push({\n                            key: prop,\n                            type: sharedApi_1.InitPropType.FUNCTION,\n                            descriptor: descr\n                        });\n                    }\n                    else {\n                        props.push({\n                            key: prop,\n                            type: sharedApi_1.InitPropType.VALUE,\n                            descriptor: descr\n                        });\n                    }\n                });\n                this.replyToInstanceMessage(handle, msg, props);\n                return;\n            })\n                .catch((err) => {\n                const errStack = (0, lib_1.stripStack)(err.stack || err.toString(), [\n                    /onMessageFromParent/,\n                    /threadedclass-worker/\n                ]);\n                let errorResponse = `${errStack}\\n executing constructor of instance \"${m.instanceId}\"`;\n                this.replyInstanceError(handle, msg, errorResponse);\n                return;\n            });\n            if (!m.config.disableMultithreading && !(0, lib_1.nodeSupportsWorkerThreads)()) {\n                this.startOrphanMonitoring();\n            }\n        }\n        else if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.PING) {\n            // This is a message from the parent process. It's just a ping, used to check if this instance is alive.\n            this.replyToInstanceMessage(handle, m, null);\n        }\n        else if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.REPLY) {\n            // A reply to an earlier message.\n            const msg = m;\n            let cb = handle.queue[msg.replyTo + ''];\n            if (!cb)\n                throw Error(`cmdId \"${msg.cmdId}\" not found in instance ${m.instanceId}!`);\n            if (msg.error) {\n                cb.cb(msg.error);\n            }\n            else {\n                cb.cb(null, msg.reply);\n            }\n            delete handle.queue[msg.replyTo + ''];\n        }\n        else if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.FUNCTION) {\n            // A function/method has been called by the parent\n            let msg = m;\n            const fixedArgs = this.decodeArgumentsFromParent(handle, msg.args);\n            let p;\n            try {\n                if (typeof instance[msg.fcn] === 'function') {\n                    p = instance[msg.fcn](...fixedArgs);\n                }\n                else {\n                    // in case instance[msg.fcn] does not exist, it will simply resolve to undefined\n                    p = instance[msg.fcn];\n                }\n            }\n            catch (error) {\n                p = Promise.reject(error);\n            }\n            Promise.resolve(p)\n                .then((result) => {\n                const encodedResult = this.encodeArgumentsToParent(instance, [result]);\n                this.replyToInstanceMessage(handle, msg, encodedResult[0]);\n            })\n                .catch((err) => {\n                const errStack = (0, lib_1.stripStack)(err.stack || err.toString(), [\n                    /onMessageFromParent/,\n                    /threadedclass-worker/\n                ]);\n                let errorResponse = `${errStack}\\n executing function \"${msg.fcn}\" of instance \"${m.instanceId}\"`;\n                this.replyInstanceError(handle, msg, errorResponse);\n            });\n        }\n        else if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.SET) {\n            // A setter has been called by the parent\n            let msg = m;\n            const fixedValue = this.decodeArgumentsFromParent(handle, [msg.value])[0];\n            instance[msg.property] = fixedValue;\n            const encodedResult = this.encodeArgumentsToParent(instance, [fixedValue]);\n            this.replyToInstanceMessage(handle, msg, encodedResult[0]);\n        }\n        else if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.KILL) {\n            // A Kill-command has been sent by the parent.\n            let msg = m;\n            // kill off instance\n            this.killInstance(handle);\n            this.replyToInstanceMessage(handle, msg, null);\n        }\n        else if (m.cmd === sharedApi_1.Message.To.Instance.CommandType.CALLBACK) {\n            // A callback has been called by the parent.\n            // A \"callback\" is a function that has been sent to the parent process from the child instance.\n            let msg = m;\n            let callback = this.callbacks[msg.callbackId];\n            if (callback) {\n                try {\n                    Promise.resolve(callback(...msg.args))\n                        .then((result) => {\n                        const encodedResult = this.encodeArgumentsToParent(instance, [result]);\n                        this.replyToInstanceMessage(handle, msg, encodedResult[0]);\n                    })\n                        .catch((err) => {\n                        let errorResponse = (err.stack || err.toString()) + `\\n executing callback of instance \"${m.instanceId}\"`;\n                        this.replyInstanceError(handle, msg, errorResponse);\n                    });\n                }\n                catch (err) {\n                    let errorResponse = (err.stack || err.toString()) + `\\n executing (outer) callback of instance \"${m.instanceId}\"`;\n                    this.replyInstanceError(handle, msg, errorResponse);\n                }\n            }\n            else {\n                this.replyInstanceError(handle, msg, `Callback \"${msg.callbackId}\" not found on instance \"${m.instanceId}\"`);\n            }\n        }\n        else {\n            (0, lib_1.assertNever)(m);\n        }\n    }\n    handleChildMessageFromParent(m, handle) {\n        if (m.cmd === sharedApi_1.Message.To.Child.CommandType.GET_MEM_USAGE) {\n            let memUsage = (process ?\n                process.memoryUsage() :\n                // @ts-ignore web-worker global window\n                window ?\n                    // @ts-ignore web-worker global window\n                    window.performance.memory :\n                    { error: 'N/A' });\n            const encodedResult = this.encodeArgumentsToParent({}, [memUsage])[0];\n            this.replyToChildMessage(handle, m, encodedResult);\n        }\n    }\n    startOrphanMonitoring() {\n        if (this._config) {\n            const pingTime = 5000;\n            setInterval(() => {\n                if (this._parentPid && !isRunning(this._parentPid)) {\n                    console.log(`Parent pid ${this._parentPid} missing, exiting process!`);\n                    setTimeout(() => {\n                        process.exit(27);\n                    }, 100);\n                }\n            }, pingTime);\n        }\n    }\n}\nexports.Worker = Worker;\n//# sourceMappingURL=worker.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayMap = exports.combineErrorStacks = exports.stripStack = exports.getErrorStack = exports.assertNever = exports.getWorkerThreads = exports.nodeSupportsWorkerThreads = exports.browserSupportsWebWorkers = exports.isBrowser = void 0;\n/**\n * Returns true if running in th browser (if not, then we're in NodeJS)\n */\nfunction isBrowser() {\n    return !(process && process.hasOwnProperty('stdin'));\n}\nexports.isBrowser = isBrowser;\nfunction browserSupportsWebWorkers() {\n    // @ts-ignore\n    return !!(isBrowser() && window.Worker);\n}\nexports.browserSupportsWebWorkers = browserSupportsWebWorkers;\nfunction nodeSupportsWorkerThreads() {\n    const workerThreads = getWorkerThreads();\n    return !!workerThreads;\n}\nexports.nodeSupportsWorkerThreads = nodeSupportsWorkerThreads;\nfunction getWorkerThreads() {\n    try {\n        const workerThreads = require('worker_threads');\n        return workerThreads;\n    }\n    catch (e) {\n        return null;\n    }\n}\nexports.getWorkerThreads = getWorkerThreads;\n/**\n * Helper function to simply assert that the value is of the type never.\n * Usage: at the end of if/else or switch, to ensure that there is no fallthrough.\n */\nfunction assertNever(_value) {\n    // does nothing\n}\nexports.assertNever = assertNever;\nfunction getErrorStack(err) {\n    if (typeof err === 'object') {\n        const stack = err.stack;\n        if (stack)\n            return stack;\n        return `${err}`;\n    }\n    else {\n        return `${err}`;\n    }\n}\nexports.getErrorStack = getErrorStack;\nfunction stripStack(stack, matchLines) {\n    if (!stack)\n        return stack;\n    const stackLines = stack.split('\\n');\n    let matchIndex = -1;\n    for (let i = 0; i < stackLines.length; i++) {\n        let matching = false;\n        for (const line of matchLines) {\n            if (stackLines[i] && stackLines[i].match(line)) {\n                if (matchIndex === -1)\n                    matchIndex = i;\n                matching = true;\n                i += 1;\n            }\n            else {\n                matching = false;\n                break;\n            }\n        }\n        if (matching) {\n            return stackLines.slice(0, matchIndex).join('\\n');\n        }\n    }\n    // else, return the original:\n    return stack;\n}\nexports.stripStack = stripStack;\nfunction combineErrorStacks(orgError, ...stacks) {\n    if (typeof orgError === 'object') {\n        const err = new Error(orgError.message);\n        err.stack = combineErrorStacks(`${orgError.stack}`, ...stacks);\n        return err;\n    }\n    else {\n        return orgError + '\\n' + stacks.join('\\n');\n    }\n}\nexports.combineErrorStacks = combineErrorStacks;\n/** A specific type of Map which contains an array of values */\nclass ArrayMap extends Map {\n    constructor() {\n        super();\n    }\n    /** Appends new elements to the end of an array, and returns the new length of the array.  */\n    push(key, value) {\n        const arr = this.get(key);\n        if (!arr) {\n            this.set(key, [value]);\n            return 1;\n        }\n        else {\n            arr.push(value);\n            return arr.length;\n        }\n    }\n    /** Removes an element from the array, returns true if the element was found and removed */\n    remove(key, value) {\n        let removedSomething = false;\n        const arr = this.get(key);\n        if (arr) {\n            const index = arr.indexOf(value);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                removedSomething = true;\n            }\n            if (arr.length === 0) {\n                this.delete(key);\n            }\n        }\n        return removedSomething;\n    }\n    arraySize(key) {\n        var _a, _b;\n        return (_b = (_a = this.get(key)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;\n    }\n    /** The total number of elements in all of the arrays  */\n    get totalSize() {\n        let total = 0;\n        for (const arr of this.values()) {\n            total += arr.length;\n        }\n        return total;\n    }\n}\nexports.ArrayMap = ArrayMap;\n//# sourceMappingURL=lib.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeArguments = exports.encodeArguments = exports.Message = exports.InitPropType = exports.DEFAULT_AUTO_RESTART_RETRY_DELAY = exports.DEFAULT_AUTO_RESTART_RETRY_COUNT = exports.DEFAULT_KILL_TIMEOUT = exports.DEFAULT_RESTART_TIMEOUT = exports.DEFAULT_CHILD_FREEZE_TIME = void 0;\n// This file contains definitions for the API between the child and parent process.\nexports.DEFAULT_CHILD_FREEZE_TIME = 1000; // how long to wait before considering a child to be unresponsive\nexports.DEFAULT_RESTART_TIMEOUT = 1000; // how long to wait for the child to come back after restart\nexports.DEFAULT_KILL_TIMEOUT = 1000; // how long to wait for the thread to close when terminating it\nexports.DEFAULT_AUTO_RESTART_RETRY_COUNT = 1; // after how many failed restarts to give up\nexports.DEFAULT_AUTO_RESTART_RETRY_DELAY = 1000; // how long to wait before retrying a failed restart\nvar InitPropType;\n(function (InitPropType) {\n    InitPropType[\"FUNCTION\"] = \"function\";\n    InitPropType[\"VALUE\"] = \"value\";\n})(InitPropType = exports.InitPropType || (exports.InitPropType = {}));\n// Messages to/from child instances ------------------------------------------------\n/** Definitions of all messages between the child and parent */\nvar Message;\n(function (Message) {\n    /** Containes definitions of messages sent from the parent process */\n    let To;\n    (function (To) {\n        /** Defines messages sent from the parent process to the child instance */\n        let Instance;\n        (function (Instance) {\n            let CommandType;\n            (function (CommandType) {\n                CommandType[\"INIT\"] = \"init\";\n                CommandType[\"PING\"] = \"ping\";\n                CommandType[\"FUNCTION\"] = \"fcn\";\n                CommandType[\"REPLY\"] = \"reply\";\n                CommandType[\"SET\"] = \"set\";\n                CommandType[\"KILL\"] = \"kill\";\n                CommandType[\"CALLBACK\"] = \"callback\";\n            })(CommandType = Instance.CommandType || (Instance.CommandType = {}));\n        })(Instance = To.Instance || (To.Instance = {}));\n        /** Defines messages sent from the parent process to the child process */\n        let Child;\n        (function (Child) {\n            let CommandType;\n            (function (CommandType) {\n                CommandType[\"GET_MEM_USAGE\"] = \"get_mem_usage\";\n                CommandType[\"REPLY\"] = \"reply\";\n            })(CommandType = Child.CommandType || (Child.CommandType = {}));\n        })(Child = To.Child || (To.Child = {}));\n    })(To = Message.To || (Message.To = {}));\n    /** Containes definitions of messages sent from the child process */\n    let From;\n    (function (From) {\n        /** Defines messages sent from the child instance to the parent process */\n        let Instance;\n        (function (Instance) {\n            let CommandType;\n            (function (CommandType) {\n                CommandType[\"CALLBACK\"] = \"callback\";\n                CommandType[\"REPLY\"] = \"reply\";\n            })(CommandType = Instance.CommandType || (Instance.CommandType = {}));\n        })(Instance = From.Instance || (From.Instance = {}));\n        /** Defines messages sent from the child process to the parent process */\n        let Child;\n        (function (Child) {\n            let CommandType;\n            (function (CommandType) {\n                CommandType[\"LOG\"] = \"log\";\n                CommandType[\"REPLY\"] = \"reply\";\n                CommandType[\"CALLBACK\"] = \"callback\";\n            })(CommandType = Child.CommandType || (Child.CommandType = {}));\n        })(Child = From.Child || (From.Child = {}));\n    })(From = Message.From || (Message.From = {}));\n})(Message = exports.Message || (exports.Message = {}));\nvar ArgumentType;\n(function (ArgumentType) {\n    ArgumentType[\"STRING\"] = \"string\";\n    ArgumentType[\"NUMBER\"] = \"number\";\n    ArgumentType[\"UNDEFINED\"] = \"undefined\";\n    ArgumentType[\"NULL\"] = \"null\";\n    ArgumentType[\"OBJECT\"] = \"object\";\n    ArgumentType[\"FUNCTION\"] = \"function\";\n    ArgumentType[\"BUFFER\"] = \"buffer\";\n    ArgumentType[\"OTHER\"] = \"other\";\n})(ArgumentType || (ArgumentType = {}));\nlet argumentsCallbackId = 0;\nfunction encodeArguments(instance, callbacks, args, disabledMultithreading) {\n    try {\n        return args.map((arg, i) => {\n            try {\n                if (typeof arg === 'object' && arg === instance) {\n                    return { type: ArgumentType.OBJECT, value: 'self' };\n                }\n                if (disabledMultithreading) {\n                    // In single-threaded mode, we can send the arguments directly, without any conversion:\n                    if (arg instanceof Buffer)\n                        return { type: ArgumentType.BUFFER, original: arg, value: null };\n                    if (typeof arg === 'object')\n                        return { type: ArgumentType.OBJECT, original: arg, value: null };\n                }\n                if (arg instanceof Buffer)\n                    return { type: ArgumentType.BUFFER, value: arg.toString('hex') };\n                if (typeof arg === 'string')\n                    return { type: ArgumentType.STRING, value: arg };\n                if (typeof arg === 'number')\n                    return { type: ArgumentType.NUMBER, value: arg };\n                if (typeof arg === 'function') {\n                    // have we seen this one before?\n                    for (const id in callbacks) {\n                        if (callbacks[id] === arg) {\n                            return { type: ArgumentType.FUNCTION, value: id + '' };\n                        }\n                    }\n                    // new function, so add it to our list\n                    const callbackId = argumentsCallbackId++;\n                    callbacks[callbackId + ''] = arg;\n                    return { type: ArgumentType.FUNCTION, value: callbackId + '' };\n                }\n                if (arg === undefined)\n                    return { type: ArgumentType.UNDEFINED, value: arg };\n                if (arg === null)\n                    return { type: ArgumentType.NULL, value: arg };\n                if (typeof arg === 'object')\n                    return { type: ArgumentType.OBJECT, value: arg };\n                return { type: ArgumentType.OTHER, value: arg };\n            }\n            catch (e) {\n                if (e.stack)\n                    e.stack += '\\nIn encodeArguments, argument ' + i;\n                throw e;\n            }\n        });\n    }\n    catch (e) {\n        if (e.stack)\n            e.stack += '\\nThreadedClass, unsupported attribute';\n        throw e;\n    }\n}\nexports.encodeArguments = encodeArguments;\nfunction decodeArguments(instance, args, getCallback) {\n    // Go through arguments and de-serialize them\n    return args.map((a) => {\n        if (a.original !== undefined)\n            return a.original;\n        if (a.type === ArgumentType.STRING)\n            return a.value;\n        if (a.type === ArgumentType.NUMBER)\n            return a.value;\n        if (a.type === ArgumentType.BUFFER)\n            return Buffer.from(a.value, 'hex');\n        if (a.type === ArgumentType.UNDEFINED)\n            return a.value;\n        if (a.type === ArgumentType.NULL)\n            return a.value;\n        if (a.type === ArgumentType.FUNCTION) {\n            return getCallback(a);\n        }\n        if (a.type === ArgumentType.OBJECT) {\n            if (a.value === 'self') {\n                return instance();\n            }\n            else {\n                return a.value;\n            }\n        }\n        return a.value;\n    });\n}\nexports.decodeArguments = decodeArguments;\n//# sourceMappingURL=sharedApi.js.map","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","module.exports = function (pid) {\n  if (module.exports.stub !== module.exports) {\n      return module.exports.stub.apply(this, arguments);\n  }\n  try {\n    return process.kill(pid,0)\n  }\n  catch (e) {\n    return e.code === 'EPERM'\n  }\n}\nmodule.exports.stub = module.exports;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"]}