{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dist/asar-loader.js","node_modules/asar-node/index.js","node_modules/asar-node/lib/asar.js","node_modules/asar-node/lib/fs.js","node_modules/asar-node/lib/lookup.js","node_modules/asar-node/lib/pickle.js","node_modules/asar-node/lib/register.js","node_modules/asar-node/lib/require.js","node_modules/asar-node/lib/util.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","register","addAsarToLookupPaths","WorkerThreads","workerData","lookup","getState","lookupAsar","checkLookupState","registered","checkRegisterState","nodeRequire","path","fs","process","versions","electron","pickle","Filesystem","[object Object]","src","this","resolve","header","files","json","dirs","split","sep","dir","relative","name","basename","node","searchNodeFromDirectory","dirname","shouldUnpack","searchNodeFromPath","unpacked","options","fillFilesFromHeader","result","fullPath","join","packState","push","isPack","followLinks","info","getNode","link","getFile","filesystemCache","readFilesystemSync","archive","fd","openSync","size","headerBuf","sizeBuf","Buffer","alloc","readSync","createFromBuffer","createIterator","readUInt32","closeSync","readString","JSON","parse","headerSize","readArchiveHeaderSync","filesystem","extractFile","filename","buffer","readFileSync","offset","parseInt","statFile","disk","asar","asarDisk","splitPath","nextInode","uid","getuid","gid","getgid","fakeTime","Date","asarStatsToFsStats","stats","isFile","dev","ino","mode","nlink","rdev","atime","birthtime","mtime","ctime","isDirectory","isSymbolicLink","isBlockDevice","isCharacterDevice","isFIFO","isSocket","isAsar","asarPath","filePath","apply","arguments","encoding","flag","TypeError","content","_error","toString","createReadStream","defaultOption","autoClose","start","end","Object","prototype","assign","statSync","lstatSync","readdirSync","_","keys","existsSync","realpathSync","stat","Module","_resolveLookupPaths","resolvePaths","paths","splice","oldResolveLookupPaths","request","parent","newReturn","alignInt","alignment","PickleIterator","payload","payloadOffset","readIndex","endIndex","getPayloadSize","readBool","readInt","readBytes","readInt32LE","readUInt32LE","readInt64","readInt64LE","readUInt64","readUInt64LE","readFloat","readFloatLE","readDouble","readDoubleLE","method","readPayloadOffset","getReadPayloadOffsetAndAdvance","slice","advance","alignedSize","Pickle","initFromBuffer","initEmpty","capacityAfterHeader","writeOffset","resize","setPayloadSize","toBuffer","writeBool","value","writeInt","writeBytes","writeInt32LE","writeUInt32","writeUInt32LE","writeInt64","writeInt64LE","writeUInt64","writeUInt64LE","writeFloat","writeFloatLE","writeDouble","writeDoubleLE","writeString","byteLength","payloadSize","data","dataLength","newSize","Math","max","write","endOffset","fill","newCapacity","concat","createEmpty","_findPath","_extensions","_parent","toAbsolute","oldFindPath","isMain","isInAsar","lastIndexOf","isAbsolute","charAt","checkFilename","extname","substr","unshift","target","asarCompiler","pkgPath","indexjs","indexjson","indexnode","indexnodeUnpack","replace","pkg","main","unpackedPath","checkFolder","absolutePath","__webpack_require__","__non_webpack_require__","undefined","mainDir","cwd","indexOf","indexWindows","indexPosix","index"],"mappings":"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","file":"asar-loader.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// Register the asar support. This could be customised/changed if needing something else\nconst { register, addAsarToLookupPaths } = require('asar-node');\nregister();\naddAsarToLookupPaths();\n// WorkerThreads.workerData contains the path to the file that threadedclass wants to execute. Run it now\nconst WorkerThreads = require('worker_threads');\nif (!WorkerThreads.workerData)\n    throw new Error('Missing workerData defining path to load');\nrequire(WorkerThreads.workerData);\n//# sourceMappingURL=asar-loader.js.map","const lookup = require('./lib/lookup.js')\r\nconst register = require('./lib/register.js')\r\n\r\nfunction getState () {\r\n  return {\r\n    lookupAsar: lookup.checkLookupState(),\r\n    registered: register.checkRegisterState()\r\n  }\r\n}\r\n\r\nexports.addAsarToLookupPaths = lookup.addAsarToLookupPaths\r\nexports.register = register.register\r\nexports.getState = getState\r\n","// Extract from asar 2.0.3\r\nconst nodeRequire = require('./require.js')()\r\nconst path = require('path')\r\nconst fs = process.versions.electron ? nodeRequire('original-fs') : require('fs')\r\nconst pickle = require('./pickle')\r\n// const UINT64 = require('cuint/lib/uint64.js')\r\n\r\nclass Filesystem {\r\n  constructor (src) {\r\n    this.src = path.resolve(src)\r\n    this.header = { files: {} }\r\n    // this.offset = UINT64(0)\r\n  }\r\n\r\n  searchNodeFromDirectory (p) {\r\n    let json = this.header\r\n    const dirs = p.split(path.sep)\r\n    for (const dir of dirs) {\r\n      if (dir !== '.') {\r\n        json = json.files[dir]\r\n      }\r\n    }\r\n    return json\r\n  }\r\n\r\n  searchNodeFromPath (p) {\r\n    p = path.relative(this.src, p)\r\n    if (!p) { return this.header }\r\n    const name = path.basename(p)\r\n    const node = this.searchNodeFromDirectory(path.dirname(p))\r\n    if (node.files == null) {\r\n      node.files = {}\r\n    }\r\n    if (node.files[name] == null) {\r\n      node.files[name] = {}\r\n    }\r\n    return node.files[name]\r\n  }\r\n\r\n  insertDirectory (p, shouldUnpack) {\r\n    const node = this.searchNodeFromPath(p)\r\n    if (shouldUnpack) {\r\n      node.unpacked = shouldUnpack\r\n    }\r\n    node.files = {}\r\n    return node.files\r\n  }\r\n\r\n  listFiles (options) {\r\n    const files = []\r\n    const fillFilesFromHeader = function (p, json) {\r\n      if (!json.files) {\r\n        return\r\n      }\r\n      return (() => {\r\n        const result = []\r\n        for (const f in json.files) {\r\n          const fullPath = path.join(p, f)\r\n          const packState = json.files[f].unpacked === true ? 'unpack' : 'pack  '\r\n          files.push((options && options.isPack) ? `${packState} : ${fullPath}` : fullPath)\r\n          result.push(fillFilesFromHeader(fullPath, json.files[f]))\r\n        }\r\n        return result\r\n      })()\r\n    }\r\n\r\n    fillFilesFromHeader('/', this.header)\r\n    return files\r\n  }\r\n\r\n  getNode (p) {\r\n    const node = this.searchNodeFromDirectory(path.dirname(p))\r\n    const name = path.basename(p)\r\n    if (name) {\r\n      return node.files[name]\r\n    } else {\r\n      return node\r\n    }\r\n  }\r\n\r\n  getFile (p, followLinks) {\r\n    followLinks = typeof followLinks === 'undefined' ? true : followLinks\r\n    const info = this.getNode(p)\r\n\r\n    // if followLinks is false we don't resolve symlinks\r\n    if (info.link && followLinks) {\r\n      return this.getFile(info.link)\r\n    } else {\r\n      return info\r\n    }\r\n  }\r\n}\r\n\r\nlet filesystemCache = {}\r\n\r\nfunction extractFile (archive, filename) {\r\n  const filesystem = readFilesystemSync(archive)\r\n  return readFileSync(filesystem, filename, filesystem.getFile(filename))\r\n}\r\n\r\nfunction statFile (archive, filename, followLinks) {\r\n  const filesystem = readFilesystemSync(archive)\r\n  return filesystem.getFile(filename, followLinks)\r\n}\r\n\r\nfunction readFileSync (filesystem, filename, info) {\r\n  let buffer = Buffer.alloc(info.size)\r\n  if (info.size <= 0) { return buffer }\r\n  if (info.unpacked) {\r\n    // it's an unpacked file, copy it.\r\n    buffer = fs.readFileSync(path.join(`${filesystem.src}.unpacked`, filename))\r\n  } else {\r\n    // Node throws an exception when reading 0 bytes into a 0-size buffer,\r\n    // so we short-circuit the read in this case.\r\n    const fd = fs.openSync(filesystem.src, 'r')\r\n    try {\r\n      const offset = 8 + filesystem.headerSize + parseInt(info.offset)\r\n      fs.readSync(fd, buffer, 0, info.size, offset)\r\n    } finally {\r\n      fs.closeSync(fd)\r\n    }\r\n  }\r\n  return buffer\r\n}\r\n\r\nfunction readArchiveHeaderSync (archive) {\r\n  const fd = fs.openSync(archive, 'r')\r\n  let size\r\n  let headerBuf\r\n  try {\r\n    const sizeBuf = Buffer.alloc(8)\r\n    if (fs.readSync(fd, sizeBuf, 0, 8, null) !== 8) {\r\n      throw new Error('Unable to read header size')\r\n    }\r\n\r\n    const sizePickle = pickle.createFromBuffer(sizeBuf)\r\n    size = sizePickle.createIterator().readUInt32()\r\n    headerBuf = Buffer.alloc(size)\r\n    if (fs.readSync(fd, headerBuf, 0, size, null) !== size) {\r\n      throw new Error('Unable to read header')\r\n    }\r\n  } finally {\r\n    fs.closeSync(fd)\r\n  }\r\n\r\n  const headerPickle = pickle.createFromBuffer(headerBuf)\r\n  const header = headerPickle.createIterator().readString()\r\n  return { header: JSON.parse(header), headerSize: size }\r\n}\r\n\r\nfunction readFilesystemSync (archive) {\r\n  if (!filesystemCache[archive]) {\r\n    const header = readArchiveHeaderSync(archive)\r\n    const filesystem = new Filesystem(archive)\r\n    filesystem.header = header.header\r\n    filesystem.headerSize = header.headerSize\r\n    filesystemCache[archive] = filesystem\r\n  }\r\n  return filesystemCache[archive]\r\n}\r\n\r\nexports.extractFile = extractFile\r\nexports.statFile = statFile\r\nexports.disk = {\r\n  readFilesystemSync\r\n}\r\n","const nodeRequire = require('./require.js')()\r\nconst fs = process.versions.electron ? nodeRequire('original-fs') : require('fs')\r\nconst asar = require('./asar.js')\r\nconst asarDisk = asar.disk\r\nconst path = require('path')\r\nconst pickle = require('./pickle')\r\nconst { splitPath } = require('./util.js')\r\n\r\nlet nextInode = 0\r\nconst uid = process.getuid != null ? process.getuid() : 0\r\nconst gid = process.getgid != null ? process.getgid() : 0\r\nconst fakeTime = new Date()\r\nconst asarStatsToFsStats = (stats) => {\r\n  const isFile = !stats.files\r\n  return {\r\n    dev: 1,\r\n    ino: ++nextInode,\r\n    mode: 33188,\r\n    nlink: 1,\r\n    uid: uid,\r\n    gid: gid,\r\n    rdev: 0,\r\n    atime: stats.atime || fakeTime,\r\n    birthtime: stats.birthtime || fakeTime,\r\n    mtime: stats.mtime || fakeTime,\r\n    ctime: stats.ctime || fakeTime,\r\n    size: stats.size,\r\n    isFile: () => isFile,\r\n    isDirectory: () => !isFile,\r\n    isSymbolicLink: () => false,\r\n    isBlockDevice: () => false,\r\n    isCharacterDevice: () => false,\r\n    isFIFO: () => false,\r\n    isSocket: () => false\r\n  }\r\n}\r\n\r\n// Start overriding fs methods.\r\nconst readFileSync = fs.readFileSync\r\nfs.readFileSync = function (p, options) {\r\n  const [isAsar, asarPath, filePath] = splitPath(p)\r\n  if (!isAsar || filePath === '') return readFileSync.apply(this, arguments)\r\n\r\n  if (!options) {\r\n    options = { encoding: null, flag: 'r' }\r\n  } else if (typeof options === 'string') {\r\n    options = { encoding: options, flag: 'r' }\r\n  } else if (typeof options !== 'object') {\r\n    throw new TypeError('Bad arguments')\r\n  }\r\n\r\n  let content\r\n  try {\r\n    content = asar.extractFile(asarPath, filePath)\r\n  } catch (_error) {\r\n    throw new Error('ENOENT: no such file or directory, open \\'' + p + '\\'')\r\n  }\r\n  if (options.encoding) {\r\n    return content.toString(options.encoding)\r\n  } else {\r\n    return content\r\n  }\r\n}\r\n\r\nconst createReadStream = fs.createReadStream\r\nfs.createReadStream = function (p, options) {\r\n  if (!p || (options && options.fd)) return createReadStream.apply(this, arguments)\r\n  const [isAsar, asarPath, filePath] = splitPath(p)\r\n  if (!isAsar || filePath === '') return createReadStream.apply(this, arguments)\r\n\r\n  const fd = fs.openSync(asarPath, 'r')\r\n\r\n  const sizeBuf = Buffer.alloc(8)\r\n  if (fs.readSync(fd, sizeBuf, 0, 8, null) !== 8) {\r\n    throw new Error('Unable to read header size')\r\n  }\r\n\r\n  const sizePickle = pickle.createFromBuffer(sizeBuf)\r\n  let headerSize = sizePickle.createIterator().readUInt32()\r\n\r\n  let stats\r\n  try {\r\n    stats = asar.statFile(asarPath, filePath)\r\n  } catch (_error) {\r\n    throw new Error('Not found \\'' + p + '\\'')\r\n  }\r\n\r\n  let defaultOption = {\r\n    fd,\r\n    autoClose: true,\r\n    start: 8 + headerSize + parseInt(stats.offset, 10),\r\n    end: 8 + headerSize + parseInt(stats.offset, 10) + stats.size - 1\r\n  }\r\n\r\n  if (Object.prototype.toString.call(options) === '[object Object]') {\r\n    if (typeof options.end === 'number') {\r\n      defaultOption.end = defaultOption.start + options.end\r\n      delete options.end\r\n    }\r\n    if (typeof options.start === 'number') {\r\n      defaultOption.start += options.start\r\n      delete options.start\r\n    }\r\n    options = Object.assign({}, defaultOption, options)\r\n  } else {\r\n    options = defaultOption\r\n  }\r\n\r\n  return createReadStream('', options)\r\n}\r\n\r\nconst statSync = fs.statSync\r\nfs.statSync = function (p) {\r\n  const [isAsar, asarPath, filePath] = splitPath(p)\r\n  if (!isAsar || filePath === '') return statSync.apply(this, arguments)\r\n  return asarStatsToFsStats(asar.statFile(asarPath, filePath, true))\r\n}\r\n\r\nconst lstatSync = fs.lstatSync\r\nfs.lstatSync = function (p) {\r\n  const [isAsar, asarPath, filePath] = splitPath(p)\r\n  if (!isAsar || filePath === '') return lstatSync.apply(this, arguments)\r\n  return asarStatsToFsStats(asar.statFile(asarPath, filePath))\r\n}\r\n\r\nconst readdirSync = fs.readdirSync\r\nfs.readdirSync = function (p) {\r\n  const [isAsar, asarPath, filePath] = splitPath(p)\r\n  if (!isAsar) return readdirSync.apply(this, arguments)\r\n  const filesystem = asarDisk.readFilesystemSync(asarPath)\r\n  let node\r\n  try {\r\n    node = filesystem.getNode(filePath)\r\n    if (!node) throw new Error()\r\n  } catch (_) {\r\n    throw new Error('ENOENT: no such file or directory, asar readdirSync \\'' + p + '\\'')\r\n  }\r\n  if (node.files) {\r\n    return Object.keys(node.files)\r\n  }\r\n  throw new Error('ENOTDIR: not a directory, asar readdirSync \\'' + p + '\\'')\r\n}\r\n\r\nconst existsSync = fs.existsSync\r\nfs.existsSync = function (p) {\r\n  const [isAsar, asarPath, filePath] = splitPath(p)\r\n  if (!isAsar || filePath === '') return existsSync.apply(this, arguments)\r\n  try {\r\n    asar.statFile(asarPath, filePath)\r\n    return true\r\n  } catch (_error) {\r\n    return false\r\n  }\r\n}\r\n\r\nconst realpathSync = fs.realpathSync\r\nfs.realpathSync = function (p) {\r\n  let [isAsar, asarPath, filePath] = splitPath(p)\r\n  if (!isAsar || filePath === '') return realpathSync.apply(this, arguments)\r\n  const stat = asar.statFile(asarPath, filePath)\r\n  if (stat.link) filePath = stat.link\r\n  return path.join(realpathSync(asarPath), filePath)\r\n}\r\n\r\nmodule.exports = fs\r\n","\r\nlet lookupAsar = false\r\n\r\nfunction addAsarToLookupPaths () {\r\n  if (lookupAsar) return\r\n  let Module\r\n  try {\r\n    Module = require('module')\r\n  } catch (_error) {\r\n    Module = null\r\n  }\r\n\r\n  if (Module && typeof Module._resolveLookupPaths === 'function') {\r\n    const resolvePaths = function resolvePaths (paths) {\r\n      for (let i = 0; i < paths.length; i++) {\r\n        if (require('path').basename(paths[i]) === 'node_modules') {\r\n          paths.splice(i + 1, 0, paths[i] + '.asar')\r\n          i++\r\n        }\r\n      }\r\n    }\r\n    const oldResolveLookupPaths = Module._resolveLookupPaths\r\n    Module._resolveLookupPaths = oldResolveLookupPaths.length === 2 ? function (request, parent) {\r\n      const result = oldResolveLookupPaths.call(this, request, parent)\r\n      if (!result) return result\r\n\r\n      resolvePaths(result)\r\n\r\n      return result\r\n    } : function (request, parent, newReturn) {\r\n      const result = oldResolveLookupPaths.call(this, request, parent, newReturn)\r\n\r\n      const paths = newReturn ? result : result[1]\r\n      resolvePaths(paths)\r\n\r\n      return result\r\n    }\r\n    lookupAsar = true\r\n  }\r\n}\r\n\r\nfunction checkLookupState () {\r\n  return lookupAsar\r\n}\r\n\r\nexports.addAsarToLookupPaths = addAsarToLookupPaths\r\nexports.checkLookupState = checkLookupState\r\n","// Extract from chromium-pickle-js 0.2.0\r\n\r\n// sizeof(T).\r\nvar SIZE_INT32 = 4\r\nvar SIZE_UINT32 = 4\r\nvar SIZE_INT64 = 8\r\nvar SIZE_UINT64 = 8\r\nvar SIZE_FLOAT = 4\r\nvar SIZE_DOUBLE = 8\r\n\r\n// The allocation granularity of the payload.\r\nvar PAYLOAD_UNIT = 64\r\n\r\n// Largest JS number.\r\nvar CAPACITY_READ_ONLY = 9007199254740992\r\n\r\n// Aligns 'i' by rounding it up to the next multiple of 'alignment'.\r\nvar alignInt = function (i, alignment) {\r\n  return i + (alignment - (i % alignment)) % alignment\r\n}\r\n\r\n// PickleIterator reads data from a Pickle. The Pickle object must remain valid\r\n// while the PickleIterator object is in use.\r\nvar PickleIterator = (function () {\r\n  function PickleIterator (pickle) {\r\n    this.payload = pickle.header\r\n    this.payloadOffset = pickle.headerSize\r\n    this.readIndex = 0\r\n    this.endIndex = pickle.getPayloadSize()\r\n  }\r\n\r\n  PickleIterator.prototype.readBool = function () {\r\n    return this.readInt() !== 0\r\n  }\r\n\r\n  PickleIterator.prototype.readInt = function () {\r\n    return this.readBytes(SIZE_INT32, Buffer.prototype.readInt32LE)\r\n  }\r\n\r\n  PickleIterator.prototype.readUInt32 = function () {\r\n    return this.readBytes(SIZE_UINT32, Buffer.prototype.readUInt32LE)\r\n  }\r\n\r\n  PickleIterator.prototype.readInt64 = function () {\r\n    return this.readBytes(SIZE_INT64, Buffer.prototype.readInt64LE)\r\n  }\r\n\r\n  PickleIterator.prototype.readUInt64 = function () {\r\n    return this.readBytes(SIZE_UINT64, Buffer.prototype.readUInt64LE)\r\n  }\r\n\r\n  PickleIterator.prototype.readFloat = function () {\r\n    return this.readBytes(SIZE_FLOAT, Buffer.prototype.readFloatLE)\r\n  }\r\n\r\n  PickleIterator.prototype.readDouble = function () {\r\n    return this.readBytes(SIZE_DOUBLE, Buffer.prototype.readDoubleLE)\r\n  }\r\n\r\n  PickleIterator.prototype.readString = function () {\r\n    return this.readBytes(this.readInt()).toString()\r\n  }\r\n\r\n  PickleIterator.prototype.readBytes = function (length, method) {\r\n    var readPayloadOffset = this.getReadPayloadOffsetAndAdvance(length)\r\n    if (method != null) {\r\n      return method.call(this.payload, readPayloadOffset, length)\r\n    } else {\r\n      return this.payload.slice(readPayloadOffset, readPayloadOffset + length)\r\n    }\r\n  }\r\n\r\n  PickleIterator.prototype.getReadPayloadOffsetAndAdvance = function (length) {\r\n    if (length > this.endIndex - this.readIndex) {\r\n      this.readIndex = this.endIndex\r\n      throw new Error('Failed to read data with length of ' + length)\r\n    }\r\n    var readPayloadOffset = this.payloadOffset + this.readIndex\r\n    this.advance(length)\r\n    return readPayloadOffset\r\n  }\r\n\r\n  PickleIterator.prototype.advance = function (size) {\r\n    var alignedSize = alignInt(size, SIZE_UINT32)\r\n    if (this.endIndex - this.readIndex < alignedSize) {\r\n      this.readIndex = this.endIndex\r\n    } else {\r\n      this.readIndex += alignedSize\r\n    }\r\n  }\r\n\r\n  return PickleIterator\r\n})()\r\n\r\n// This class provides facilities for basic binary value packing and unpacking.\r\n//\r\n// The Pickle class supports appending primitive values (ints, strings, etc.)\r\n// to a pickle instance.  The Pickle instance grows its internal memory buffer\r\n// dynamically to hold the sequence of primitive values.   The internal memory\r\n// buffer is exposed as the \"data\" of the Pickle.  This \"data\" can be passed\r\n// to a Pickle object to initialize it for reading.\r\n//\r\n// When reading from a Pickle object, it is important for the consumer to know\r\n// what value types to read and in what order to read them as the Pickle does\r\n// not keep track of the type of data written to it.\r\n//\r\n// The Pickle's data has a header which contains the size of the Pickle's\r\n// payload.  It can optionally support additional space in the header.  That\r\n// space is controlled by the header_size parameter passed to the Pickle\r\n// constructor.\r\nvar Pickle = (function () {\r\n  function Pickle (buffer) {\r\n    if (buffer) {\r\n      this.initFromBuffer(buffer)\r\n    } else {\r\n      this.initEmpty()\r\n    }\r\n  }\r\n\r\n  Pickle.prototype.initEmpty = function () {\r\n    this.header = Buffer.alloc(0)\r\n    this.headerSize = SIZE_UINT32\r\n    this.capacityAfterHeader = 0\r\n    this.writeOffset = 0\r\n    this.resize(PAYLOAD_UNIT)\r\n    this.setPayloadSize(0)\r\n  }\r\n\r\n  Pickle.prototype.initFromBuffer = function (buffer) {\r\n    this.header = buffer\r\n    this.headerSize = buffer.length - this.getPayloadSize()\r\n    this.capacityAfterHeader = CAPACITY_READ_ONLY\r\n    this.writeOffset = 0\r\n    if (this.headerSize > buffer.length) {\r\n      this.headerSize = 0\r\n    }\r\n    if (this.headerSize !== alignInt(this.headerSize, SIZE_UINT32)) {\r\n      this.headerSize = 0\r\n    }\r\n    if (this.headerSize === 0) {\r\n      this.header = Buffer.alloc(0)\r\n    }\r\n  }\r\n\r\n  Pickle.prototype.createIterator = function () {\r\n    return new PickleIterator(this)\r\n  }\r\n\r\n  Pickle.prototype.toBuffer = function () {\r\n    return this.header.slice(0, this.headerSize + this.getPayloadSize())\r\n  }\r\n\r\n  Pickle.prototype.writeBool = function (value) {\r\n    return this.writeInt(value ? 1 : 0)\r\n  }\r\n\r\n  Pickle.prototype.writeInt = function (value) {\r\n    return this.writeBytes(value, SIZE_INT32, Buffer.prototype.writeInt32LE)\r\n  }\r\n\r\n  Pickle.prototype.writeUInt32 = function (value) {\r\n    return this.writeBytes(value, SIZE_UINT32, Buffer.prototype.writeUInt32LE)\r\n  }\r\n\r\n  Pickle.prototype.writeInt64 = function (value) {\r\n    return this.writeBytes(value, SIZE_INT64, Buffer.prototype.writeInt64LE)\r\n  }\r\n\r\n  Pickle.prototype.writeUInt64 = function (value) {\r\n    return this.writeBytes(value, SIZE_UINT64, Buffer.prototype.writeUInt64LE)\r\n  }\r\n\r\n  Pickle.prototype.writeFloat = function (value) {\r\n    return this.writeBytes(value, SIZE_FLOAT, Buffer.prototype.writeFloatLE)\r\n  }\r\n\r\n  Pickle.prototype.writeDouble = function (value) {\r\n    return this.writeBytes(value, SIZE_DOUBLE, Buffer.prototype.writeDoubleLE)\r\n  }\r\n\r\n  Pickle.prototype.writeString = function (value) {\r\n    var length = Buffer.byteLength(value, 'utf8')\r\n    if (!this.writeInt(length)) {\r\n      return false\r\n    }\r\n    return this.writeBytes(value, length)\r\n  }\r\n\r\n  Pickle.prototype.setPayloadSize = function (payloadSize) {\r\n    return this.header.writeUInt32LE(payloadSize, 0)\r\n  }\r\n\r\n  Pickle.prototype.getPayloadSize = function () {\r\n    return this.header.readUInt32LE(0)\r\n  }\r\n\r\n  Pickle.prototype.writeBytes = function (data, length, method) {\r\n    var dataLength = alignInt(length, SIZE_UINT32)\r\n    var newSize = this.writeOffset + dataLength\r\n    if (newSize > this.capacityAfterHeader) {\r\n      this.resize(Math.max(this.capacityAfterHeader * 2, newSize))\r\n    }\r\n    if (method != null) {\r\n      method.call(this.header, data, this.headerSize + this.writeOffset)\r\n    } else {\r\n      this.header.write(data, this.headerSize + this.writeOffset, length)\r\n    }\r\n    var endOffset = this.headerSize + this.writeOffset + length\r\n    this.header.fill(0, endOffset, endOffset + dataLength - length)\r\n    this.setPayloadSize(newSize)\r\n    this.writeOffset = newSize\r\n    return true\r\n  }\r\n\r\n  Pickle.prototype.resize = function (newCapacity) {\r\n    newCapacity = alignInt(newCapacity, PAYLOAD_UNIT)\r\n    this.header = Buffer.concat([this.header, Buffer.alloc(newCapacity)])\r\n    this.capacityAfterHeader = newCapacity\r\n  }\r\n\r\n  return Pickle\r\n})()\r\n\r\nexports.createEmpty = function createEmpty () {\r\n  return new Pickle()\r\n}\r\n\r\nexports.createFromBuffer = function createFromBuffer (buffer) {\r\n  return new Pickle(buffer)\r\n}\r\n","let registered = false\r\n\r\nfunction register () {\r\n  if (registered) return\r\n  let Module\r\n  try {\r\n    Module = require('module')\r\n  } catch (_error) {\r\n    Module = null\r\n  }\r\n  if (!Module) return\r\n\r\n  const path = require('path')\r\n  const fs = require('./fs.js')\r\n\r\n  if (typeof Module._resolveLookupPaths === 'function' && typeof Module._findPath === 'function' && Module._extensions != null) {\r\n    const oldResolveLookupPaths = Module._resolveLookupPaths\r\n    Module._resolveLookupPaths = oldResolveLookupPaths.length === 2 ? function (request, parent) {\r\n      const result = oldResolveLookupPaths.call(this, request, parent)\r\n      if (!result) return result\r\n\r\n      result._parent = parent\r\n      return result\r\n    } : function (request, parent, newReturn) {\r\n      const result = oldResolveLookupPaths.call(this, request, parent, newReturn)\r\n\r\n      result._parent = parent\r\n      return result\r\n    }\r\n\r\n    const { toAbsolute, splitPath } = require('./util.js')\r\n    const oldFindPath = Module._findPath\r\n    Module._findPath = function (request, paths, isMain) {\r\n      const parent = paths ? paths._parent : null\r\n      if (paths) delete paths._parent\r\n\r\n      const isInAsar = !!parent && !!parent.filename && (parent.filename.lastIndexOf('.asar') !== -1)\r\n\r\n      if (!(path.isAbsolute(request) || request.charAt(0) === '.')) {\r\n        if (isInAsar) {\r\n          if (parent.filename.substr(-5) === '.asar') {\r\n            paths.unshift(path.join(parent.filename, 'node_modules.asar'))\r\n            paths.unshift(path.join(parent.filename, 'node_modules'))\r\n          }\r\n\r\n          for (let i = 0; i < paths.length; i++) {\r\n            const target = path.join(paths[i], request)\r\n            try {\r\n              return checkFilename(request, target)\r\n            } catch (_error) {\r\n              continue\r\n            }\r\n          }\r\n          throw new Error('Cannot find module \\'' + request + '\\'')\r\n        }\r\n      } else {\r\n        if (isInAsar) {\r\n          if (path.isAbsolute(request)) return checkFilename(request, request)\r\n          const absoluteRequest = toAbsolute(path.join(path.extname(parent.filename) === '.asar' ? parent.filename : path.dirname(parent.filename), request))\r\n          return checkFilename(request, absoluteRequest)\r\n        }\r\n      }\r\n\r\n      const [isAsar, asarPath, filePath] = splitPath(request)\r\n      if (!isAsar) return oldFindPath.apply(this, arguments)\r\n      if (filePath === '') {\r\n        return toAbsolute(asarPath)\r\n      }\r\n\r\n      const absoluteRequest = toAbsolute(request)\r\n      return checkFilename(request, absoluteRequest)\r\n    }\r\n\r\n    Module._extensions['.asar'] = Module._extensions['.asar'] || function asarCompiler (module, filename) {\r\n      const pkgPath = toAbsolute(path.join(filename, 'package.json'))\r\n      const indexjs = toAbsolute(path.join(filename, 'index.js'))\r\n      const indexjson = toAbsolute(path.join(filename, 'index.json'))\r\n      const indexnode = toAbsolute(path.join(filename, 'index.node'))\r\n      const indexnodeUnpack = indexnode.replace(/\\.asar/, '.asar.unpacked')\r\n      if (fs.existsSync(pkgPath) && fs.statSync(pkgPath).isFile()) {\r\n        const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'))\r\n        pkg.main = pkg.main || 'index'\r\n        const main = toAbsolute(path.join(filename, pkg.main))\r\n        if (path.extname(main) !== '') {\r\n          if (path.extname(main) === '.node') {\r\n            const unpackedPath = main.replace(/\\.asar/, '.asar.unpacked')\r\n            if (fs.existsSync(unpackedPath)) return Module._extensions['.node'](module, unpackedPath)\r\n          } else {\r\n            if (fs.existsSync(main)) return Module._extensions[path.extname(main)](module, main)\r\n          }\r\n          throw new Error('Cannot find module \\'' + filename + '\\'')\r\n        }\r\n        if (fs.existsSync(main + '.js')) return Module._extensions['.js'](module, main + '.js')\r\n        if (fs.existsSync(main + '.json')) return Module._extensions['.json'](module, main + '.json')\r\n        if (fs.existsSync(main + '.node')) return Module._extensions['.node'](module, main.replace(/\\.asar/, '.asar.unpacked') + '.node')\r\n        if (fs.existsSync(main) && fs.statSync(main).isDirectory()) return asarCompiler(module, main)\r\n        throw new Error('Cannot find module \\'' + filename + '\\'')\r\n      } else if (fs.existsSync(indexjs) && fs.statSync(indexjs).isFile()) {\r\n        return Module._extensions['.js'](module, indexjs)\r\n      } else if (fs.existsSync(indexjson) && fs.statSync(indexjson).isFile()) {\r\n        return Module._extensions['.json'](module, indexjson)\r\n      } else if (fs.existsSync(indexnode) && fs.statSync(indexnode).isFile() && fs.existsSync(indexnodeUnpack) && fs.statSync(indexnodeUnpack).isFile()) {\r\n        return Module._extensions['.node'](module, indexnodeUnpack)\r\n      } else {\r\n        throw new Error('Cannot find module \\'' + filename + '\\'')\r\n      }\r\n    }\r\n\r\n    registered = true\r\n  }\r\n\r\n  function checkFolder (request, absolutePath) {\r\n    const pkgPath = path.join(absolutePath, 'package.json')\r\n    const indexjs = path.join(absolutePath, 'index.js')\r\n    const indexjson = path.join(absolutePath, 'index.json')\r\n    const indexnode = path.join(absolutePath, 'index.node')\r\n    const indexnodeUnpack = indexnode.replace(/\\.asar/, '.asar.unpacked')\r\n\r\n    if (fs.existsSync(pkgPath) && fs.statSync(pkgPath).isFile()) {\r\n      const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf8'))\r\n      pkg.main = pkg.main || 'index'\r\n      const main = path.join(absolutePath, pkg.main)\r\n      return checkFilename(request, main)\r\n    } else if (fs.existsSync(indexjs) && fs.statSync(indexjs).isFile()) {\r\n      return indexjs\r\n    } else if (fs.existsSync(indexjson) && fs.statSync(indexjson).isFile()) {\r\n      return indexjson\r\n    } else if (fs.existsSync(indexnode) && fs.existsSync(indexnodeUnpack) && fs.statSync(indexnodeUnpack).isFile()) {\r\n      return indexnodeUnpack\r\n    } else {\r\n      throw new Error('Cannot find module \\'' + request + '\\'')\r\n    }\r\n  }\r\n\r\n  function checkFilename (request, absolutePath) {\r\n    if (!path.isAbsolute(absolutePath)) throw new Error('Not absolute path.')\r\n    if (path.extname(absolutePath) !== '') {\r\n      if (fs.existsSync(absolutePath)) {\r\n        if (fs.statSync(absolutePath).isDirectory()) return checkFolder(request, absolutePath)\r\n        if (path.extname(absolutePath) === '.node') {\r\n          if (fs.existsSync(absolutePath.replace(/\\.asar/, '.asar.unpacked')) && fs.statSync(absolutePath.replace(/\\.asar/, '.asar.unpacked')).isFile()) {\r\n            return absolutePath.replace(/\\.asar/, '.asar.unpacked')\r\n          }\r\n          throw new Error('Cannot find module \\'' + request + '\\'')\r\n        }\r\n        return absolutePath\r\n      }\r\n    }\r\n    if (fs.existsSync(absolutePath + '.js') && fs.statSync(absolutePath + '.js').isFile()) return absolutePath + '.js'\r\n    if (fs.existsSync(absolutePath + '.json') && fs.statSync(absolutePath + '.json').isFile()) return absolutePath + '.json'\r\n    if (fs.existsSync(absolutePath + '.node') &&\r\n        fs.statSync(absolutePath + '.node').isFile() &&\r\n        fs.existsSync(absolutePath.replace(/\\.asar/, '.asar.unpacked') + '.node') &&\r\n        fs.statSync(absolutePath.replace(/\\.asar/, '.asar.unpacked') + '.node').isFile()) return absolutePath.replace(/\\.asar/, '.asar.unpacked') + '.node'\r\n    if (fs.existsSync(absolutePath) && fs.statSync(absolutePath).isDirectory()) {\r\n      return checkFolder(request, absolutePath)\r\n    }\r\n    throw new Error('Cannot find module \\'' + request + '\\'')\r\n  }\r\n}\r\n\r\nfunction checkRegisterState () {\r\n  return registered\r\n}\r\n\r\nexports.register = register\r\nexports.checkRegisterState = checkRegisterState\r\n","// eslint-disable-next-line\r\nfunction getNodeRequire() {\r\n  var __r\r\n  // eslint-disable-next-line\r\n  if (typeof __webpack_require__ !== 'undefined') {\r\n    // eslint-disable-next-line\r\n    __r = ((typeof __non_webpack_require__ !== 'undefined') ? __non_webpack_require__ : undefined)\r\n  } else {\r\n    __r = ((typeof require !== 'undefined') ? require : undefined)\r\n  }\r\n  return __r\r\n}\r\n\r\n// eslint-disable-next-line\r\nmodule.exports = getNodeRequire\r\n","const path = require('path')\r\nconst nodeRequire = require('./require.js')()\r\n\r\nconst mainDir = nodeRequire.main ? path.dirname(nodeRequire.main.filename) : process.cwd()\r\n\r\nexports.toAbsolute = function (p) {\r\n  return path.isAbsolute(p) ? p : (\r\n    mainDir.indexOf('asar-node' + path.sep + 'bin') === -1 ? path.join(mainDir, p) : path.join(process.cwd(), p)\r\n  )\r\n}\r\n\r\nexports.splitPath = function (p) {\r\n  if (typeof p !== 'string') return [false]\r\n  if (p.substr(-5) === '.asar') return [true, p, '']\r\n  const indexWindows = p.lastIndexOf('.asar\\\\')\r\n  const indexPosix = p.lastIndexOf('.asar/')\r\n  if (indexWindows === -1 && indexPosix === -1) return [false]\r\n  const index = indexPosix === -1 ? indexWindows : indexPosix\r\n  return [true, p.substr(0, index + 5), p.substr(index + 6)]\r\n}\r\n"]}